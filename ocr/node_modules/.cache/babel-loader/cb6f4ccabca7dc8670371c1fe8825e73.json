{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { ComputerVisionClientContext } from \"./computerVisionClientContext\";\n\nvar ComputerVisionClient =\n/** @class */\nfunction (_super) {\n  __extends(ComputerVisionClient, _super);\n  /**\n   * Initializes a new instance of the ComputerVisionClient class.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n\n\n  function ComputerVisionClient(credentials, endpoint, options) {\n    return _super.call(this, credentials, endpoint, options) || this;\n  }\n\n  ComputerVisionClient.prototype.analyzeImage = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, analyzeImageOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.describeImage = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, describeImageOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.detectObjects = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, detectObjectsOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.listModels = function (options, callback) {\n    return this.sendOperationRequest({\n      options: options\n    }, listModelsOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.analyzeImageByDomain = function (model, url, options, callback) {\n    return this.sendOperationRequest({\n      model: model,\n      url: url,\n      options: options\n    }, analyzeImageByDomainOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.recognizePrintedText = function (detectOrientation, url, options, callback) {\n    return this.sendOperationRequest({\n      detectOrientation: detectOrientation,\n      url: url,\n      options: options\n    }, recognizePrintedTextOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.tagImage = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, tagImageOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.generateThumbnail = function (width, height, url, options, callback) {\n    return this.sendOperationRequest({\n      width: width,\n      height: height,\n      url: url,\n      options: options\n    }, generateThumbnailOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.getAreaOfInterest = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, getAreaOfInterestOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.read = function (url, options, callback) {\n    return this.sendOperationRequest({\n      url: url,\n      options: options\n    }, readOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.getReadResult = function (operationId, options, callback) {\n    return this.sendOperationRequest({\n      operationId: operationId,\n      options: options\n    }, getReadResultOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.analyzeImageInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, analyzeImageInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.getAreaOfInterestInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, getAreaOfInterestInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.describeImageInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, describeImageInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.detectObjectsInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, detectObjectsInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.generateThumbnailInStream = function (width, height, image, options, callback) {\n    return this.sendOperationRequest({\n      width: width,\n      height: height,\n      image: image,\n      options: options\n    }, generateThumbnailInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.analyzeImageByDomainInStream = function (model, image, options, callback) {\n    return this.sendOperationRequest({\n      model: model,\n      image: image,\n      options: options\n    }, analyzeImageByDomainInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.recognizePrintedTextInStream = function (detectOrientation, image, options, callback) {\n    return this.sendOperationRequest({\n      detectOrientation: detectOrientation,\n      image: image,\n      options: options\n    }, recognizePrintedTextInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.tagImageInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, tagImageInStreamOperationSpec, callback);\n  };\n\n  ComputerVisionClient.prototype.readInStream = function (image, options, callback) {\n    return this.sendOperationRequest({\n      image: image,\n      options: options\n    }, readInStreamOperationSpec, callback);\n  };\n\n  return ComputerVisionClient;\n}(ComputerVisionClientContext); // Operation Specifications\n\n\nvar serializer = new msRest.Serializer(Mappers);\nvar analyzeImageOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.visualFeatures, Parameters.details, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar describeImageOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.maxCandidates, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar detectObjectsOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar listModelsOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"models\",\n  urlParameters: [Parameters.endpoint],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListModelsResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar analyzeImageByDomainOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [Parameters.endpoint, Parameters.model],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar recognizePrintedTextOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.detectOrientation, Parameters.language1, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar tagImageOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar generateThumbnailOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.width, Parameters.height, Parameters.smartCropping, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer: serializer\n};\nvar getAreaOfInterestOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar readOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language2, Parameters.pages, Parameters.modelVersion, Parameters.readingOrder],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: __assign(__assign({}, Mappers.ImageUrl), {\n      required: true\n    })\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadHeaders\n    }\n  },\n  serializer: serializer\n};\nvar getReadResultOperationSpec = {\n  httpMethod: \"GET\",\n  path: \"read/analyzeResults/{operationId}\",\n  urlParameters: [Parameters.endpoint, Parameters.operationId],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReadOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError\n    }\n  },\n  serializer: serializer\n};\nvar analyzeImageInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.visualFeatures, Parameters.details, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageAnalysis\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar getAreaOfInterestInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"areaOfInterest\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AreaOfInterestResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar describeImageInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"describe\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.maxCandidates, Parameters.language0, Parameters.descriptionExclude, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageDescription\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar detectObjectsInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"detect\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar generateThumbnailInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"generateThumbnail\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.width, Parameters.height, Parameters.smartCropping, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      }\n    },\n    default: {}\n  },\n  serializer: serializer\n};\nvar analyzeImageByDomainInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"models/{model}/analyze\",\n  urlParameters: [Parameters.endpoint, Parameters.model],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainModelResults\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar recognizePrintedTextInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"ocr\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.detectOrientation, Parameters.language1, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OcrResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar tagImageInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"tag\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language0, Parameters.modelVersion],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TagResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionErrorResponse\n    }\n  },\n  serializer: serializer\n};\nvar readInStreamOperationSpec = {\n  httpMethod: \"POST\",\n  path: \"read/analyze\",\n  urlParameters: [Parameters.endpoint],\n  queryParameters: [Parameters.language2, Parameters.pages, Parameters.modelVersion, Parameters.readingOrder],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ReadInStreamHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionOcrError,\n      headersMapper: Mappers.ReadInStreamHeaders\n    }\n  },\n  serializer: serializer\n};\nexport { ComputerVisionClient, ComputerVisionClientContext, Models as ComputerVisionModels, Mappers as ComputerVisionMappers };","map":{"version":3,"sources":["../src/computerVisionClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nimport { __assign, __extends } from \"tslib\";\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { ComputerVisionClientContext } from \"./computerVisionClientContext\";\nvar ComputerVisionClient = /** @class */ (function (_super) {\n    __extends(ComputerVisionClient, _super);\n    /**\n     * Initializes a new instance of the ComputerVisionClient class.\n     * @param endpoint Supported Cognitive Services endpoints.\n     * @param credentials Subscription credentials which uniquely identify client subscription.\n     * @param [options] The parameter options\n     */\n    function ComputerVisionClient(credentials, endpoint, options) {\n        return _super.call(this, credentials, endpoint, options) || this;\n    }\n    ComputerVisionClient.prototype.analyzeImage = function (url, options, callback) {\n        return this.sendOperationRequest({\n            url: url,\n            options: options\n        }, analyzeImageOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.describeImage = function (url, options, callback) {\n        return this.sendOperationRequest({\n            url: url,\n            options: options\n        }, describeImageOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.detectObjects = function (url, options, callback) {\n        return this.sendOperationRequest({\n            url: url,\n            options: options\n        }, detectObjectsOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.listModels = function (options, callback) {\n        return this.sendOperationRequest({\n            options: options\n        }, listModelsOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.analyzeImageByDomain = function (model, url, options, callback) {\n        return this.sendOperationRequest({\n            model: model,\n            url: url,\n            options: options\n        }, analyzeImageByDomainOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.recognizePrintedText = function (detectOrientation, url, options, callback) {\n        return this.sendOperationRequest({\n            detectOrientation: detectOrientation,\n            url: url,\n            options: options\n        }, recognizePrintedTextOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.tagImage = function (url, options, callback) {\n        return this.sendOperationRequest({\n            url: url,\n            options: options\n        }, tagImageOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.generateThumbnail = function (width, height, url, options, callback) {\n        return this.sendOperationRequest({\n            width: width,\n            height: height,\n            url: url,\n            options: options\n        }, generateThumbnailOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.getAreaOfInterest = function (url, options, callback) {\n        return this.sendOperationRequest({\n            url: url,\n            options: options\n        }, getAreaOfInterestOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.read = function (url, options, callback) {\n        return this.sendOperationRequest({\n            url: url,\n            options: options\n        }, readOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.getReadResult = function (operationId, options, callback) {\n        return this.sendOperationRequest({\n            operationId: operationId,\n            options: options\n        }, getReadResultOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.analyzeImageInStream = function (image, options, callback) {\n        return this.sendOperationRequest({\n            image: image,\n            options: options\n        }, analyzeImageInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.getAreaOfInterestInStream = function (image, options, callback) {\n        return this.sendOperationRequest({\n            image: image,\n            options: options\n        }, getAreaOfInterestInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.describeImageInStream = function (image, options, callback) {\n        return this.sendOperationRequest({\n            image: image,\n            options: options\n        }, describeImageInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.detectObjectsInStream = function (image, options, callback) {\n        return this.sendOperationRequest({\n            image: image,\n            options: options\n        }, detectObjectsInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.generateThumbnailInStream = function (width, height, image, options, callback) {\n        return this.sendOperationRequest({\n            width: width,\n            height: height,\n            image: image,\n            options: options\n        }, generateThumbnailInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.analyzeImageByDomainInStream = function (model, image, options, callback) {\n        return this.sendOperationRequest({\n            model: model,\n            image: image,\n            options: options\n        }, analyzeImageByDomainInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.recognizePrintedTextInStream = function (detectOrientation, image, options, callback) {\n        return this.sendOperationRequest({\n            detectOrientation: detectOrientation,\n            image: image,\n            options: options\n        }, recognizePrintedTextInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.tagImageInStream = function (image, options, callback) {\n        return this.sendOperationRequest({\n            image: image,\n            options: options\n        }, tagImageInStreamOperationSpec, callback);\n    };\n    ComputerVisionClient.prototype.readInStream = function (image, options, callback) {\n        return this.sendOperationRequest({\n            image: image,\n            options: options\n        }, readInStreamOperationSpec, callback);\n    };\n    return ComputerVisionClient;\n}(ComputerVisionClientContext));\n// Operation Specifications\nvar serializer = new msRest.Serializer(Mappers);\nvar analyzeImageOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"analyze\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.visualFeatures,\n        Parameters.details,\n        Parameters.language0,\n        Parameters.descriptionExclude,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.ImageAnalysis\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar describeImageOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"describe\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.maxCandidates,\n        Parameters.language0,\n        Parameters.descriptionExclude,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.ImageDescription\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar detectObjectsOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"detect\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.DetectResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar listModelsOperationSpec = {\n    httpMethod: \"GET\",\n    path: \"models\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListModelsResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar analyzeImageByDomainOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"models/{model}/analyze\",\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.model\n    ],\n    queryParameters: [\n        Parameters.language0,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.DomainModelResults\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar recognizePrintedTextOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"ocr\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.detectOrientation,\n        Parameters.language1,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.OcrResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar tagImageOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"tag\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.language0,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.TagResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar generateThumbnailOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"generateThumbnail\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.width,\n        Parameters.height,\n        Parameters.smartCropping,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: {\n                serializedName: \"parsedResponse\",\n                type: {\n                    name: \"Stream\"\n                }\n            }\n        },\n        default: {}\n    },\n    serializer: serializer\n};\nvar getAreaOfInterestOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"areaOfInterest\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        200: {\n            bodyMapper: Mappers.AreaOfInterestResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar readOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"read/analyze\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.language2,\n        Parameters.pages,\n        Parameters.modelVersion,\n        Parameters.readingOrder\n    ],\n    requestBody: {\n        parameterPath: {\n            url: \"url\"\n        },\n        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })\n    },\n    responses: {\n        202: {\n            headersMapper: Mappers.ReadHeaders\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionOcrError,\n            headersMapper: Mappers.ReadHeaders\n        }\n    },\n    serializer: serializer\n};\nvar getReadResultOperationSpec = {\n    httpMethod: \"GET\",\n    path: \"read/analyzeResults/{operationId}\",\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.operationId\n    ],\n    responses: {\n        200: {\n            bodyMapper: Mappers.ReadOperationResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionOcrError\n        }\n    },\n    serializer: serializer\n};\nvar analyzeImageInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"analyze\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.visualFeatures,\n        Parameters.details,\n        Parameters.language0,\n        Parameters.descriptionExclude,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ImageAnalysis\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar getAreaOfInterestInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"areaOfInterest\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.AreaOfInterestResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar describeImageInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"describe\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.maxCandidates,\n        Parameters.language0,\n        Parameters.descriptionExclude,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ImageDescription\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar detectObjectsInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"detect\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.DetectResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar generateThumbnailInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"generateThumbnail\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.width,\n        Parameters.height,\n        Parameters.smartCropping,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: {\n                serializedName: \"parsedResponse\",\n                type: {\n                    name: \"Stream\"\n                }\n            }\n        },\n        default: {}\n    },\n    serializer: serializer\n};\nvar analyzeImageByDomainInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"models/{model}/analyze\",\n    urlParameters: [\n        Parameters.endpoint,\n        Parameters.model\n    ],\n    queryParameters: [\n        Parameters.language0,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.DomainModelResults\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar recognizePrintedTextInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"ocr\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.detectOrientation,\n        Parameters.language1,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.OcrResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar tagImageInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"tag\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.language0,\n        Parameters.modelVersion\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.TagResult\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionErrorResponse\n        }\n    },\n    serializer: serializer\n};\nvar readInStreamOperationSpec = {\n    httpMethod: \"POST\",\n    path: \"read/analyze\",\n    urlParameters: [\n        Parameters.endpoint\n    ],\n    queryParameters: [\n        Parameters.language2,\n        Parameters.pages,\n        Parameters.modelVersion,\n        Parameters.readingOrder\n    ],\n    requestBody: {\n        parameterPath: \"image\",\n        mapper: {\n            required: true,\n            serializedName: \"Image\",\n            type: {\n                name: \"Stream\"\n            }\n        }\n    },\n    contentType: \"application/octet-stream\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ReadInStreamHeaders\n        },\n        default: {\n            bodyMapper: Mappers.ComputerVisionOcrError,\n            headersMapper: Mappers.ReadInStreamHeaders\n        }\n    },\n    serializer: serializer\n};\nexport { ComputerVisionClient, ComputerVisionClientContext, Models as ComputerVisionModels, Mappers as ComputerVisionMappers };\n//# sourceMappingURL=computerVisionClient.js.map"]},"metadata":{},"sourceType":"module"}