{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __extends } from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport var DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\nexport function redirectPolicy(maximumRetries) {\n  if (maximumRetries === void 0) {\n    maximumRetries = 20;\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nvar RedirectPolicy =\n/** @class */\nfunction (_super) {\n  __extends(RedirectPolicy, _super);\n\n  function RedirectPolicy(nextPolicy, options, maxRetries) {\n    if (maxRetries === void 0) {\n      maxRetries = 20;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.maxRetries = maxRetries;\n    return _this;\n  }\n\n  RedirectPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return handleRedirect(_this, response, 0);\n    });\n  };\n\n  return RedirectPolicy;\n}(BaseRequestPolicy);\n\nexport { RedirectPolicy };\n\nfunction handleRedirect(policy, response, currentRetries) {\n  var request = response.request,\n      status = response.status;\n  var locationHeader = response.headers.get(\"location\");\n\n  if (locationHeader && (status === 300 || status === 301 && [\"GET\", \"HEAD\"].includes(request.method) || status === 302 && [\"GET\", \"POST\", \"HEAD\"].includes(request.method) || status === 303 && \"POST\" === request.method || status === 307) && (request.redirectLimit !== undefined && currentRetries < request.redirectLimit || request.redirectLimit === undefined && currentRetries < policy.maxRetries)) {\n    var builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString(); // POST request with Status code 302 and 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    // reference: https://tools.ietf.org/html/rfc7231#page-57 && https://fetch.spec.whatwg.org/#http-redirect-fetch\n\n    if ((status === 302 || status === 303) && request.method === \"POST\") {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy.sendRequest(request).then(function (res) {\n      return handleRedirect(policy, res, currentRetries + 1);\n    }).then(function (res) {\n      return recordRedirect(res, request.url);\n    });\n  }\n\n  return Promise.resolve(response);\n}\n\nfunction recordRedirect(response, redirect) {\n  // This is called as the recursive calls to handleRedirect() unwind,\n  // only record the deepest/last redirect\n  if (!response.redirected) {\n    response.redirected = true;\n    response.url = redirect;\n  }\n\n  return response;\n}","map":{"version":3,"sources":["../../../lib/policies/redirectPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __extends } from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy, } from \"./requestPolicy\";\nexport var DefaultRedirectOptions = {\n    handleRedirects: true,\n    maxRetries: 20,\n};\nexport function redirectPolicy(maximumRetries) {\n    if (maximumRetries === void 0) { maximumRetries = 20; }\n    return {\n        create: function (nextPolicy, options) {\n            return new RedirectPolicy(nextPolicy, options, maximumRetries);\n        },\n    };\n}\nvar RedirectPolicy = /** @class */ (function (_super) {\n    __extends(RedirectPolicy, _super);\n    function RedirectPolicy(nextPolicy, options, maxRetries) {\n        if (maxRetries === void 0) { maxRetries = 20; }\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this.maxRetries = maxRetries;\n        return _this;\n    }\n    RedirectPolicy.prototype.sendRequest = function (request) {\n        var _this = this;\n        return this._nextPolicy\n            .sendRequest(request)\n            .then(function (response) { return handleRedirect(_this, response, 0); });\n    };\n    return RedirectPolicy;\n}(BaseRequestPolicy));\nexport { RedirectPolicy };\nfunction handleRedirect(policy, response, currentRetries) {\n    var request = response.request, status = response.status;\n    var locationHeader = response.headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && [\"GET\", \"HEAD\"].includes(request.method)) ||\n            (status === 302 && [\"GET\", \"POST\", \"HEAD\"].includes(request.method)) ||\n            (status === 303 && \"POST\" === request.method) ||\n            status === 307) &&\n        ((request.redirectLimit !== undefined && currentRetries < request.redirectLimit) ||\n            (request.redirectLimit === undefined && currentRetries < policy.maxRetries))) {\n        var builder = URLBuilder.parse(request.url);\n        builder.setPath(locationHeader);\n        request.url = builder.toString();\n        // POST request with Status code 302 and 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        // reference: https://tools.ietf.org/html/rfc7231#page-57 && https://fetch.spec.whatwg.org/#http-redirect-fetch\n        if ((status === 302 || status === 303) && request.method === \"POST\") {\n            request.method = \"GET\";\n            delete request.body;\n        }\n        return policy._nextPolicy\n            .sendRequest(request)\n            .then(function (res) { return handleRedirect(policy, res, currentRetries + 1); })\n            .then(function (res) { return recordRedirect(res, request.url); });\n    }\n    return Promise.resolve(response);\n}\nfunction recordRedirect(response, redirect) {\n    // This is called as the recursive calls to handleRedirect() unwind,\n    // only record the deepest/last redirect\n    if (!response.redirected) {\n        response.redirected = true;\n        response.url = redirect;\n    }\n    return response;\n}\n//# sourceMappingURL=redirectPolicy.js.map"]},"metadata":{},"sourceType":"module"}