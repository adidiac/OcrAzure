{"ast":null,"code":"'use strict';\n\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\nimport { createReadStream } from 'fs';\nimport { promisify } from 'util';\nconst sleep = promisify(setTimeout);\n/**\r\n * AUTHENTICATE\r\n * This single client is used for all examples.\r\n */\n\nconst key = '231ffed796a44ee1b3cae51827505a99';\nconst endpoint = 'https://adriandiac.cognitiveservices.azure.com/';\nconst computerVisionClient = new ComputerVisionClient(new ApiKeyCredentials({\n  inHeader: {\n    'Ocp-Apim-Subscription-Key': key\n  }\n}), endpoint); // Prints all text from Read result\n\nconst STATUS_SUCCEEDED = \"succeeded\";\nconst STATUS_FAILED = \"failed\";\n\nfunction printRecText(readResults, setResult) {\n  let total = '';\n  console.log('Recognized text:');\n\n  for (const page in readResults) {\n    if (readResults.length > 1) {\n      total += `==== Page: ${page}`;\n    }\n\n    const result = readResults[page];\n\n    if (result.lines.length) {\n      for (const line of result.lines) {\n        total += line.words.map(w => w.text).join(' ');\n      }\n\n      setResult(total);\n      console.log(total);\n    } else {\n      console.log('No recognized text.');\n    }\n  }\n}\n\nasync function readTextFromURL(client, bufferArray) {\n  console.log(\"Ce trimit?\");\n  console.log(bufferArray); // To recognize text in a local image, replace client.read() with readTextInStream() as shown:\n\n  let result = await client.readInStream({\n    image: bufferArray\n  }); // Operation ID is last path segment of operationLocation (a URL)\n\n  let operation = result.operationLocation.split('/').slice(-1)[0];\n  console.log(\"ceva?\"); // Wait for read recognition to complete\n  // result.status is initially undefined, since it's the result of read\n\n  while (result.status !== STATUS_SUCCEEDED) {\n    await sleep(1000);\n    result = await client.getReadResult(operation);\n  }\n\n  console.log(\"ceva2?\");\n  return result.analyzeResult.readResults; // Return the first page of result. Replace [0] with the desired page if this is a multi-page file such as .pdf or .tiff.\n}\n\nexport async function computerVision(setResult, bufferArray) {\n  // URL images containing printed and/or handwritten text. \n  // The URL can point to image files (.jpg/.png/.bmp) or multi-page files (.pdf, .tiff).\n  const printedTextSampleURL = 'https://moderatorsampleimages.blob.core.windows.net/samples/sample2.jpg';\n  const multiLingualTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiLingual.png';\n  const mixedMultiPagePDFURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiPageHandwrittenForm.pdf'; // Recognize text in printed image from a URL\n\n  console.log('Read printed text from URL...', printedTextSampleURL.split('/').pop());\n  const printedResult = await readTextFromURL(computerVisionClient, bufferArray);\n  printRecText(printedResult, setResult);\n}","map":{"version":3,"sources":["C:/Users/Adrian/Desktop/THE PROJECTS/OCR Online/ocr/src/Service/service.js"],"names":["ComputerVisionClient","ApiKeyCredentials","createReadStream","promisify","sleep","setTimeout","key","endpoint","computerVisionClient","inHeader","STATUS_SUCCEEDED","STATUS_FAILED","printRecText","readResults","setResult","total","console","log","page","length","result","lines","line","words","map","w","text","join","readTextFromURL","client","bufferArray","readInStream","image","operation","operationLocation","split","slice","status","getReadResult","analyzeResult","computerVision","printedTextSampleURL","multiLingualTextURL","mixedMultiPagePDFURL","pop","printedResult"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\nimport { createReadStream } from 'fs';\r\nimport { promisify } from 'util';\r\n\r\nconst sleep =promisify(setTimeout);\r\n\r\n/**\r\n * AUTHENTICATE\r\n * This single client is used for all examples.\r\n */\r\nconst key = '231ffed796a44ee1b3cae51827505a99';\r\nconst endpoint = 'https://adriandiac.cognitiveservices.azure.com/';\r\n\r\n\r\nconst computerVisionClient = new ComputerVisionClient(\r\n    new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n// Prints all text from Read result\r\n\r\n\r\nconst STATUS_SUCCEEDED = \"succeeded\";\r\nconst STATUS_FAILED = \"failed\"\r\n\r\nfunction printRecText(readResults,setResult) {\r\n  let total='';\r\n  console.log('Recognized text:');\r\n  for (const page in readResults) {\r\n    if (readResults.length > 1) {\r\n      total+=`==== Page: ${page}`;\r\n    }\r\n    const result = readResults[page];\r\n    if (result.lines.length) {\r\n      for (const line of result.lines) {\r\n        total+=line.words.map(w => w.text).join(' ');\r\n      }\r\n      setResult(total)\r\n      console.log(total)\r\n    }\r\n    else { console.log('No recognized text.'); }\r\n  }\r\n}\r\n\r\nasync function readTextFromURL(client, bufferArray) {\r\n  console.log(\"Ce trimit?\")\r\n  console.log(bufferArray)\r\n  // To recognize text in a local image, replace client.read() with readTextInStream() as shown:\r\n  let result = await client.readInStream({image:bufferArray})\r\n  // Operation ID is last path segment of operationLocation (a URL)\r\n  let operation = result.operationLocation.split('/').slice(-1)[0];\r\n  console.log(\"ceva?\")\r\n  // Wait for read recognition to complete\r\n  // result.status is initially undefined, since it's the result of read\r\n  while (result.status !== STATUS_SUCCEEDED) { await sleep(1000); result = await client.getReadResult(operation); }\r\n  console.log(\"ceva2?\")\r\n\r\n  return result.analyzeResult.readResults; // Return the first page of result. Replace [0] with the desired page if this is a multi-page file such as .pdf or .tiff.\r\n}\r\n\r\n\r\nexport async function computerVision(setResult,bufferArray) {\r\n\r\n// URL images containing printed and/or handwritten text. \r\n// The URL can point to image files (.jpg/.png/.bmp) or multi-page files (.pdf, .tiff).\r\nconst printedTextSampleURL = 'https://moderatorsampleimages.blob.core.windows.net/samples/sample2.jpg';\r\nconst multiLingualTextURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiLingual.png';\r\nconst mixedMultiPagePDFURL = 'https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/MultiPageHandwrittenForm.pdf';\r\n\r\n\r\n\r\n    \r\n\r\n\r\n// Recognize text in printed image from a URL\r\n  console.log('Read printed text from URL...', printedTextSampleURL.split('/').pop());\r\n  const printedResult = await readTextFromURL(computerVisionClient, bufferArray);\r\n  printRecText(printedResult,setResult);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}